using System.Collections.Generic;
using System.Linq;
using Manatee.Trello.Exceptions;
using Manatee.Trello.Internal;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Synchronization;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A read-only collection of checklist items.
	/// </summary>
	public class ReadOnlyCheckItemCollection : ReadOnlyCollection<CheckItem>
	{
		private readonly CheckListContext _context;

		/// <summary>
		/// Retrieves a check list item which matches the supplied key.
		/// </summary>
		/// <param name="key">The key to match.</param>
		/// <returns>The matching check list item, or null if none found.</returns>
		/// <remarks>
		/// Matches on CheckItem.Id and CheckItem.Name.  Comparison is case-sensitive.
		/// </remarks>
		public CheckItem this[string key] => GetByKey(key);

		internal ReadOnlyCheckItemCollection(CheckListContext context, TrelloAuthorization auth)
			: base(() => context.Data.Id, auth)
		{
			_context = context;
		}

		/// <summary>
		/// Implement to provide data to the collection.
		/// </summary>
		protected sealed override void Update()
		{
			_context.Synchronize();
			if (_context.Data.CheckItems == null) return;
			foreach (var jsonCheckItem in _context.Data.CheckItems)
			{
				var checkItem = Items.SingleOrDefault(ci => ci.Id == jsonCheckItem.Id);
				if (checkItem == null)
					Items.Add(new CheckItem(jsonCheckItem, _context.Data.Id));
				else
					checkItem.Json = jsonCheckItem;
			}
			foreach (var checkItem in Items.ToList())
			{
				if (_context.Data.CheckItems.All(jci => jci.Id != checkItem.Id))
					Items.Remove(checkItem);
			}
		}

		private CheckItem GetByKey(string key)
		{
			return this.FirstOrDefault(ci => key.In(ci.Id, ci.Name));
		}
	}

	/// <summary>
	/// A collection of checklist items.
	/// </summary>
	public class CheckItemCollection : ReadOnlyCheckItemCollection
	{
		internal CheckItemCollection(CheckListContext context, TrelloAuthorization auth)
			: base(context, auth) {}

		/// <summary>
		/// Creates a new checklist item.
		/// </summary>
		/// <param name="name">The name of the checklist item to add.</param>
		/// <returns>The <see cref="CheckItem"/> generated by Trello.</returns>
		public CheckItem Add(string name)
		{
			var error = NotNullOrWhiteSpaceRule.Instance.Validate(null, name);
			if (error != null)
				throw new ValidationException<string>(name, new[] {error});

			var json = TrelloConfiguration.JsonFactory.Create<IJsonCheckItem>();
			json.Name = name;

			var endpoint = EndpointFactory.Build(EntityRequestType.CheckList_Write_AddCheckItem, new Dictionary<string, object> {{"_id", OwnerId}});
			var newData = JsonRepository.Execute(Auth, endpoint, json);

			return new CheckItem(newData, OwnerId);
		}
	}
}