/***************************************************************************************

	Copyright 2014 Greg Dennis

	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

	   Unless required by applicable law or agreed to in writing, software
	   distributed under the License is distributed on an "AS IS" BASIS,
	   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	   See the License for the specific language governing permissions and
	   limitations under the License.
 
	File Name:		LabelCollection.cs
	Namespace:		Manatee.Trello
	Class Name:		ReadOnlyLabelCollection, LabelCollection
	Purpose:		Collection objects for labels.

***************************************************************************************/
using System.Linq;
using Manatee.Trello.Internal.Synchronization;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A read-only collection of labels.
	/// </summary>
	public class ReadOnlyLabelCollection : ReadOnlyCollection<ReadOnlyLabel>
	{
		internal readonly CardContext _context;

		internal ReadOnlyLabelCollection(CardContext context)
			: base(context.Data.Id)
		{
			_context = context;
		}

		/// <summary>
		/// Implement to provide data to the collection.
		/// </summary>
		protected override sealed void Update()
		{
			_context.Synchronize();
			if (_context.Data.Labels == null) return;
			foreach (var jsonLabel in _context.Data.Labels)
			{
				var label = Items.SingleOrDefault(l => l.Color == jsonLabel.Color);
				if (label == null)
					Items.Add(new Label(jsonLabel.Color, jsonLabel.Name));
				else
					label.Name = jsonLabel.Name;
			}
			foreach (var label in Items.ToList())
			{
				if (_context.Data.Labels.All(jl => jl.Color != label.Color))
					Items.Remove(label);
			}
		}
	}

	/// <summary>
	/// A collection of labels.
	/// </summary>
	public class LabelCollection : ReadOnlyLabelCollection
	{
		internal LabelCollection(CardContext context)
			: base(context) {}

		/// <summary>
		/// Adds a label to the collection.
		/// </summary>
		/// <param name="color">The color of the label to add.</param>
		/// <returns>The <see cref="ReadOnlyLabel"/> generated by Trello.</returns>
		public ReadOnlyLabel Add(LabelColor color)
		{
			var label = Items.FirstOrDefault(l => l.Color == color);
			if (label == null)
			{
				label = new ReadOnlyLabel(color, null);
				Items.Add(label);
				var jsonLabel = TrelloConfiguration.JsonFactory.Create<IJsonLabel>();
				jsonLabel.Color = color;
				_context.Data.Labels.Add(jsonLabel);
				_context.AddLocalChange("Labels");
				_context.ResetTimer();
			}
			return label;
		}
		/// <summary>
		/// Removes a label from the collection.
		/// </summary>
		/// <param name="color">The color of the label to remove.</param>
		public void Remove(LabelColor color)
		{
			var label = Items.FirstOrDefault(l => l.Color == color);
			if (label == null) return;
			Items.Remove(label);

			var jsonLabel = _context.Data.Labels.FirstOrDefault(l => l.Color == color);
			if (jsonLabel == null) return;
			_context.Data.Labels.Remove(jsonLabel);
			_context.AddLocalChange("Labels");
			_context.ResetTimer();
		}
	}
}