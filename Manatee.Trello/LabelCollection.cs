/***************************************************************************************

	Copyright 2014 Greg Dennis

	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

	   Unless required by applicable law or agreed to in writing, software
	   distributed under the License is distributed on an "AS IS" BASIS,
	   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	   See the License for the specific language governing permissions and
	   limitations under the License.
 
	File Name:		LabelCollection.cs
	Namespace:		Manatee.Trello
	Class Name:		ReadOnlyLabelCollection, LabelCollection
	Purpose:		Collection objects for labels.

***************************************************************************************/

using System.Collections.Generic;
using System.Linq;
using Manatee.Trello.Exceptions;
using Manatee.Trello.Internal.Caching;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Synchronization;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A read-only collection of labels.
	/// </summary>
	public class CardLabelCollection : ReadOnlyCollection<Label>
	{
		internal readonly CardContext _context;

		internal CardLabelCollection(CardContext context)
			: base(context.Data.Id)
		{
			_context = context;
		}

		/// <summary>
		/// Adds a label to the collection.
		/// </summary>
		/// <param name="color">The color of the label to add.</param>
		/// <returns>The <see cref="ReadOnlyLabel"/> generated by Trello.</returns>
		internal void Add(Label label)
		{
			var error = NotNullRule<Label>.Instance.Validate(null, label);
			if (error != null)
				throw new ValidationException<Label>(label, new[] {error});

			if (_context.Data.Labels == null)
				Update();
			var match = Items.FirstOrDefault(l => l.Color == label.Color && l.Name == label.Name);
			if (match != null) return;
			Items.Add(label);
			var jsonLabel = TrelloConfiguration.JsonFactory.Create<IJsonLabel>();
			jsonLabel.Id = label.Id;
			_context.Data.Labels.Add(jsonLabel);
			_context.AddLocalChange("Labels");
			_context.ResetTimer();
		}
		/// <summary>
		/// Removes a label from the collection.
		/// </summary>
		/// <param name="color">The color of the label to add.</param>
		internal void Remove(Label label)
		{
			var error = NotNullRule<Label>.Instance.Validate(null, label);
			if (error != null)
				throw new ValidationException<Label>(label, new[] { error });

			if (_context.Data.Labels == null)
				Update();
			Items.Remove(label);
			var jsonLabel = _context.Data.Labels.FirstOrDefault(l => l.Id == label.Id);
			if (jsonLabel == null) return;
			_context.Data.Labels.Remove(jsonLabel);
			_context.AddLocalChange("Labels");
			_context.ResetTimer();
		}

		/// <summary>
		/// Implement to provide data to the collection.
		/// </summary>
		protected override sealed void Update()
		{
			_context.Synchronize();
			if (_context.Data.Labels == null) return;
			Items.Clear();
			Items.AddRange(_context.Data.Labels.Select(jl =>
				{
					var label = jl.GetFromCache<Label>();
					label.Json = jl;
					return label;
				}));
		}
	}

	/// <summary>
	/// A collection of labels.
	/// </summary>
	public class BoardLabelCollection : ReadOnlyCollection<Label>
	{
		internal BoardLabelCollection(string ownerId)
			: base(ownerId) {}

		/// <summary>
		/// Adds a label to the collection.
		/// </summary>
		/// <param name="color">The color of the label to add.</param>
		/// <returns>The <see cref="ReadOnlyLabel"/> generated by Trello.</returns>
		internal Label Add(string name, LabelColor? color)
		{
			var error = NotNullOrWhiteSpaceRule.Instance.Validate(null, name);
			if (error != null)
				throw new ValidationException<string>(name, new[] {error});
			if (color.HasValue)
			{
				error = EnumerationRule<LabelColor>.Instance.Validate(default(LabelColor), color.Value);
				if (error != null)
					throw new ValidationException<LabelColor>(color.Value, new[] {error});
			}
			
			var json = TrelloConfiguration.JsonFactory.Create<IJsonLabel>();
			json.Name = name;
			json.Color = color;

			var endpoint = EndpointFactory.Build(EntityRequestType.Board_Write_AddLabel);
			var newData = JsonRepository.Execute(TrelloAuthorization.Default, endpoint, json);

			return new Label(newData);
		}
		/// <summary>
		/// Removes a label from the collection.
		/// </summary>
		/// <param name="color">The color of the label to remove.</param>
		internal void Remove(Label label)
		{
			var error = NotNullRule<Label>.Instance.Validate(null, label);
			if (error != null)
				throw new ValidationException<Label>(label, new[] {error});

			Items.Remove(label);

			var endpoint = EndpointFactory.Build(EntityRequestType.Board_Write_RemoveLabel, new Dictionary<string, object> {{"_id", OwnerId}, {"_labelId", label.Id}});
			JsonRepository.Execute(TrelloAuthorization.Default, endpoint);
		}

		/// <summary>
		/// Implement to provide data to the collection.
		/// </summary>
		protected override sealed void Update()
		{
			var endpoint = EndpointFactory.Build(EntityRequestType.Board_Read_Labels, new Dictionary<string, object> {{"_id", OwnerId}});
			var newData = JsonRepository.Execute<List<IJsonLabel>>(TrelloAuthorization.Default, endpoint);

			Items.Clear();
			Items.AddRange(newData.Select(jb =>
			{
				var board = jb.GetFromCache<Label>();
				board.Json = jb;
				return board;
			}));
		}
	}
}