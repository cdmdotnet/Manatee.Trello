using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Manatee.Trello.Internal;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;
using Manatee.Trello.Rest;

namespace Manatee.Trello
{
	/// <summary>
	/// A collection of attachments.
	/// </summary>
	public class AttachmentCollection : ReadOnlyAttachmentCollection, IAttachmentCollection
	{
		internal AttachmentCollection(Func<string> getOwnerId, TrelloAuthorization auth)
			: base(getOwnerId, auth) {}

		/// <summary>
		/// Adds an attachment to a card using the URL of the attachment.
		/// </summary>
		/// <param name="url">A URL to the data to attach.  Must be a valid URL that begins with 'http://' or 'https://'.</param>
		/// <param name="name">An optional name for the attachment.  The linked file name will be used by default if not specified.</param>
		/// <param name="ct">(Optional) A cancellation token for async processing.</param>
		/// <returns>The <see cref="IAttachment"/> generated by Trello.</returns>
		public async Task<IAttachment> Add(string url, string name = null, CancellationToken ct = default)
		{
			var errors = new List<string>
				{
					NotNullOrWhiteSpaceRule.Instance.Validate(null, url),
					UriRule.Instance.Validate(null, url)
				};
			if (errors.Any(e => e != null))
				throw new ValidationException<string>(url, errors);

			var parameters = new Dictionary<string, object>
				{
					{"url", url},
				};
			if (!name.IsNullOrWhiteSpace())
				parameters.Add("name", name);
			var endpoint = EndpointFactory.Build(EntityRequestType.Card_Write_AddAttachment, new Dictionary<string, object> {{"_id", OwnerId}});
			var newData = await JsonRepository.Execute<IJsonAttachment>(Auth, endpoint, ct, parameters);

			return new Attachment(newData, OwnerId, Auth);
		}

                /// <summary>
                /// Adds an attachment to a card by uploading data.
                /// </summary>
                /// <param name="data">The byte data of the file to attach.</param>
                /// <param name="name">A name for the attachment.</param>
                /// <param name="ct">(Optional) A cancellation token for async processing.</param>
                /// <returns>The <see cref="IAttachment"/> generated by Trello.</returns>
		public async Task<IAttachment> Add(byte[] data, string name, CancellationToken ct = default)
                {
                        var parameters = new Dictionary<string, object> { { RestFile.ParameterKey, new RestFile { ContentBytes = data, FileName = name } } };
                        var endpoint = EndpointFactory.Build(EntityRequestType.Card_Write_AddAttachment, new Dictionary<string, object> { { "_id", OwnerId } });
                        var newData = await JsonRepository.Execute<IJsonAttachment>(Auth, endpoint, ct, parameters);

                        return new Attachment(newData, OwnerId, Auth);
                }

                /// <summary>
                /// Adds an attachment to a card by uploading data.
                /// </summary>
                /// <param name="filePath">The path of the file to attach.</param>
                /// <param name="name">A name for the attachment.</param>
                /// <param name="ct">(Optional) A cancellation token for async processing.</param>
                /// <returns>The <see cref="IAttachment"/> generated by Trello.</returns>
                public async Task<IAttachment> AddFile(string filePath, string name, CancellationToken ct = default)
	        {
                        if (!File.Exists(filePath)) throw new Exception(filePath + " Invalid file path");

                        var parameters = new Dictionary<string, object> {{RestFile.ParameterKey, new RestFile {FilePath = filePath, FileName = name}}};
                        var endpoint = EndpointFactory.Build(EntityRequestType.Card_Write_AddAttachment, new Dictionary<string, object> {{"_id", OwnerId}});
                        var newData = await JsonRepository.Execute<IJsonAttachment>(Auth, endpoint, ct, parameters);

                        return new Attachment(newData, OwnerId, Auth);
		}
	}
}